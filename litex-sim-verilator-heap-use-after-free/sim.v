// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : d504639f
// Date       : 2022-12-16 14:59:38
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
    output wire          sim_trace,
    input  wire          sys_clk,
    output wire          serial_source_valid,
    input  wire          serial_source_ready,
    output wire    [7:0] serial_source_data,
    input  wire          serial_sink_valid,
    output wire          serial_sink_ready,
    input  wire    [7:0] serial_sink_data
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk_1;
wire          sys_rst;
wire          por_clk;
reg           main_int_rst = 1'd1;
reg           main_soc_rst = 1'd0;
wire          main_cpu_rst;
reg     [1:0] main_reset_storage = 2'd0;
reg           main_reset_re = 1'd0;
reg    [31:0] main_scratch_storage = 32'd305419896;
reg           main_scratch_re = 1'd0;
wire   [31:0] main_bus_errors_status;
wire          main_bus_errors_we;
reg           main_bus_errors_re = 1'd0;
wire          main_bus_error;
reg    [31:0] main_bus_errors = 32'd0;
wire          main_reset;
reg    [31:0] main_interrupt = 32'd0;
wire   [29:0] main_ibus_adr;
wire   [31:0] main_ibus_dat_w;
wire   [31:0] main_ibus_dat_r;
wire    [3:0] main_ibus_sel;
wire          main_ibus_cyc;
wire          main_ibus_stb;
wire          main_ibus_ack;
wire          main_ibus_we;
wire    [2:0] main_ibus_cti;
wire    [1:0] main_ibus_bte;
wire          main_ibus_err;
wire   [29:0] main_dbus_adr;
wire   [31:0] main_dbus_dat_w;
wire   [31:0] main_dbus_dat_r;
wire    [3:0] main_dbus_sel;
wire          main_dbus_cyc;
wire          main_dbus_stb;
wire          main_dbus_ack;
wire          main_dbus_we;
wire    [2:0] main_dbus_cti;
wire    [1:0] main_dbus_bte;
wire          main_dbus_err;
reg    [31:0] main_vexriscv = 32'd0;
wire   [29:0] main_simsoc_ram_bus_adr;
wire   [31:0] main_simsoc_ram_bus_dat_w;
wire   [31:0] main_simsoc_ram_bus_dat_r;
wire    [3:0] main_simsoc_ram_bus_sel;
wire          main_simsoc_ram_bus_cyc;
wire          main_simsoc_ram_bus_stb;
reg           main_simsoc_ram_bus_ack = 1'd0;
wire          main_simsoc_ram_bus_we;
wire    [2:0] main_simsoc_ram_bus_cti;
wire    [1:0] main_simsoc_ram_bus_bte;
reg           main_simsoc_ram_bus_err = 1'd0;
reg           main_simsoc_adr_burst = 1'd0;
wire   [14:0] main_simsoc_adr;
wire   [31:0] main_simsoc_dat_r;
wire   [29:0] main_ram_bus_ram_bus_adr;
wire   [31:0] main_ram_bus_ram_bus_dat_w;
wire   [31:0] main_ram_bus_ram_bus_dat_r;
wire    [3:0] main_ram_bus_ram_bus_sel;
wire          main_ram_bus_ram_bus_cyc;
wire          main_ram_bus_ram_bus_stb;
reg           main_ram_bus_ram_bus_ack = 1'd0;
wire          main_ram_bus_ram_bus_we;
wire    [2:0] main_ram_bus_ram_bus_cti;
wire    [1:0] main_ram_bus_ram_bus_bte;
reg           main_ram_bus_ram_bus_err = 1'd0;
reg           main_ram_adr_burst = 1'd0;
wire   [10:0] main_ram_adr;
wire   [31:0] main_ram_dat_r;
reg     [3:0] main_ram_we = 4'd0;
wire   [31:0] main_ram_dat_w;
wire          main_sink_valid;
wire          main_sink_ready;
wire          main_sink_first;
wire          main_sink_last;
wire    [7:0] main_sink_payload_data;
wire          main_source_valid;
wire          main_source_ready;
reg           main_source_first = 1'd0;
reg           main_source_last = 1'd0;
wire    [7:0] main_source_payload_data;
reg           main_uart_rxtx_re = 1'd0;
wire    [7:0] main_uart_rxtx_r;
reg           main_uart_rxtx_we = 1'd0;
wire    [7:0] main_uart_rxtx_w;
wire          main_uart_txfull_status;
wire          main_uart_txfull_we;
reg           main_uart_txfull_re = 1'd0;
wire          main_uart_rxempty_status;
wire          main_uart_rxempty_we;
reg           main_uart_rxempty_re = 1'd0;
wire          main_uart_irq;
wire          main_uart_tx_status;
reg           main_uart_tx_pending = 1'd0;
wire          main_uart_tx_trigger;
reg           main_uart_tx_clear = 1'd0;
reg           main_uart_tx_trigger_d = 1'd0;
wire          main_uart_rx_status;
reg           main_uart_rx_pending = 1'd0;
wire          main_uart_rx_trigger;
reg           main_uart_rx_clear = 1'd0;
reg           main_uart_rx_trigger_d = 1'd0;
wire          main_uart_tx0;
wire          main_uart_rx0;
reg     [1:0] main_uart_status_status = 2'd0;
wire          main_uart_status_we;
reg           main_uart_status_re = 1'd0;
wire          main_uart_tx1;
wire          main_uart_rx1;
reg     [1:0] main_uart_pending_status = 2'd0;
wire          main_uart_pending_we;
reg           main_uart_pending_re = 1'd0;
reg     [1:0] main_uart_pending_r = 2'd0;
wire          main_uart_tx2;
wire          main_uart_rx2;
reg     [1:0] main_uart_enable_storage = 2'd0;
reg           main_uart_enable_re = 1'd0;
wire          main_uart_txempty_status;
wire          main_uart_txempty_we;
reg           main_uart_txempty_re = 1'd0;
wire          main_uart_rxfull_status;
wire          main_uart_rxfull_we;
reg           main_uart_rxfull_re = 1'd0;
wire          main_uart_uart_sink_valid;
wire          main_uart_uart_sink_ready;
wire          main_uart_uart_sink_first;
wire          main_uart_uart_sink_last;
wire    [7:0] main_uart_uart_sink_payload_data;
wire          main_uart_uart_source_valid;
wire          main_uart_uart_source_ready;
wire          main_uart_uart_source_first;
wire          main_uart_uart_source_last;
wire    [7:0] main_uart_uart_source_payload_data;
wire          main_uart_tx_fifo_sink_valid;
wire          main_uart_tx_fifo_sink_ready;
reg           main_uart_tx_fifo_sink_first = 1'd0;
reg           main_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_uart_tx_fifo_sink_payload_data;
wire          main_uart_tx_fifo_source_valid;
wire          main_uart_tx_fifo_source_ready;
wire          main_uart_tx_fifo_source_first;
wire          main_uart_tx_fifo_source_last;
wire    [7:0] main_uart_tx_fifo_source_payload_data;
wire          main_uart_tx_fifo_re;
reg           main_uart_tx_fifo_readable = 1'd0;
wire          main_uart_tx_fifo_syncfifo_we;
wire          main_uart_tx_fifo_syncfifo_writable;
wire          main_uart_tx_fifo_syncfifo_re;
wire          main_uart_tx_fifo_syncfifo_readable;
wire    [9:0] main_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_uart_tx_fifo_syncfifo_dout;
reg     [4:0] main_uart_tx_fifo_level0 = 5'd0;
reg           main_uart_tx_fifo_replace = 1'd0;
reg     [3:0] main_uart_tx_fifo_produce = 4'd0;
reg     [3:0] main_uart_tx_fifo_consume = 4'd0;
reg     [3:0] main_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uart_tx_fifo_wrport_dat_r;
wire          main_uart_tx_fifo_wrport_we;
wire    [9:0] main_uart_tx_fifo_wrport_dat_w;
wire          main_uart_tx_fifo_do_read;
wire    [3:0] main_uart_tx_fifo_rdport_adr;
wire    [9:0] main_uart_tx_fifo_rdport_dat_r;
wire          main_uart_tx_fifo_rdport_re;
wire    [4:0] main_uart_tx_fifo_level1;
wire    [7:0] main_uart_tx_fifo_fifo_in_payload_data;
wire          main_uart_tx_fifo_fifo_in_first;
wire          main_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_uart_tx_fifo_fifo_out_payload_data;
wire          main_uart_tx_fifo_fifo_out_first;
wire          main_uart_tx_fifo_fifo_out_last;
wire          main_uart_rx_fifo_sink_valid;
wire          main_uart_rx_fifo_sink_ready;
wire          main_uart_rx_fifo_sink_first;
wire          main_uart_rx_fifo_sink_last;
wire    [7:0] main_uart_rx_fifo_sink_payload_data;
wire          main_uart_rx_fifo_source_valid;
wire          main_uart_rx_fifo_source_ready;
wire          main_uart_rx_fifo_source_first;
wire          main_uart_rx_fifo_source_last;
wire    [7:0] main_uart_rx_fifo_source_payload_data;
wire          main_uart_rx_fifo_re;
reg           main_uart_rx_fifo_readable = 1'd0;
wire          main_uart_rx_fifo_syncfifo_we;
wire          main_uart_rx_fifo_syncfifo_writable;
wire          main_uart_rx_fifo_syncfifo_re;
wire          main_uart_rx_fifo_syncfifo_readable;
wire    [9:0] main_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_uart_rx_fifo_syncfifo_dout;
reg     [4:0] main_uart_rx_fifo_level0 = 5'd0;
reg           main_uart_rx_fifo_replace = 1'd0;
reg     [3:0] main_uart_rx_fifo_produce = 4'd0;
reg     [3:0] main_uart_rx_fifo_consume = 4'd0;
reg     [3:0] main_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uart_rx_fifo_wrport_dat_r;
wire          main_uart_rx_fifo_wrport_we;
wire    [9:0] main_uart_rx_fifo_wrport_dat_w;
wire          main_uart_rx_fifo_do_read;
wire    [3:0] main_uart_rx_fifo_rdport_adr;
wire    [9:0] main_uart_rx_fifo_rdport_dat_r;
wire          main_uart_rx_fifo_rdport_re;
wire    [4:0] main_uart_rx_fifo_level1;
wire    [7:0] main_uart_rx_fifo_fifo_in_payload_data;
wire          main_uart_rx_fifo_fifo_in_first;
wire          main_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_uart_rx_fifo_fifo_out_payload_data;
wire          main_uart_rx_fifo_fifo_out_first;
wire          main_uart_rx_fifo_fifo_out_last;
reg    [31:0] main_timer_load_storage = 32'd0;
reg           main_timer_load_re = 1'd0;
reg    [31:0] main_timer_reload_storage = 32'd0;
reg           main_timer_reload_re = 1'd0;
reg           main_timer_en_storage = 1'd0;
reg           main_timer_en_re = 1'd0;
reg           main_timer_update_value_storage = 1'd0;
reg           main_timer_update_value_re = 1'd0;
reg    [31:0] main_timer_value_status = 32'd0;
wire          main_timer_value_we;
reg           main_timer_value_re = 1'd0;
wire          main_timer_irq;
wire          main_timer_zero_status;
reg           main_timer_zero_pending = 1'd0;
wire          main_timer_zero_trigger;
reg           main_timer_zero_clear = 1'd0;
reg           main_timer_zero_trigger_d = 1'd0;
wire          main_timer_zero0;
wire          main_timer_status_status;
wire          main_timer_status_we;
reg           main_timer_status_re = 1'd0;
wire          main_timer_zero1;
wire          main_timer_pending_status;
wire          main_timer_pending_we;
reg           main_timer_pending_re = 1'd0;
reg           main_timer_pending_r = 1'd0;
wire          main_timer_zero2;
reg           main_timer_enable_storage = 1'd0;
reg           main_timer_enable_re = 1'd0;
reg    [31:0] main_timer_value = 32'd0;
reg    [13:0] builder_simsoc_adr = 14'd0;
reg           builder_simsoc_we = 1'd0;
reg    [31:0] builder_simsoc_dat_w = 32'd0;
wire   [31:0] builder_simsoc_dat_r;
wire   [29:0] builder_simsoc_wishbone_adr;
wire   [31:0] builder_simsoc_wishbone_dat_w;
reg    [31:0] builder_simsoc_wishbone_dat_r = 32'd0;
wire    [3:0] builder_simsoc_wishbone_sel;
wire          builder_simsoc_wishbone_cyc;
wire          builder_simsoc_wishbone_stb;
reg           builder_simsoc_wishbone_ack = 1'd0;
wire          builder_simsoc_wishbone_we;
wire    [2:0] builder_simsoc_wishbone_cti;
wire    [1:0] builder_simsoc_wishbone_bte;
reg           builder_simsoc_wishbone_err = 1'd0;
wire   [29:0] builder_shared_adr;
wire   [31:0] builder_shared_dat_w;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire    [3:0] builder_shared_sel;
wire          builder_shared_cyc;
wire          builder_shared_stb;
reg           builder_shared_ack = 1'd0;
wire          builder_shared_we;
wire    [2:0] builder_shared_cti;
wire    [1:0] builder_shared_bte;
wire          builder_shared_err;
wire    [1:0] builder_request;
reg           builder_grant = 1'd0;
reg     [2:0] builder_master = 3'd0;
reg     [2:0] builder_slaves = 3'd0;
reg           builder_error = 1'd0;
wire          builder_wait;
wire          builder_done;
reg    [19:0] builder_count = 20'd1000000;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire          builder_csr_bankarray_csrbank0_sel;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
wire          builder_csr_bankarray_sram_bus_we;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire    [5:0] builder_csr_bankarray_adr;
wire    [7:0] builder_csr_bankarray_dat_r;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank1_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_load0_r;
reg           builder_csr_bankarray_csrbank1_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_load0_w;
reg           builder_csr_bankarray_csrbank1_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_reload0_r;
reg           builder_csr_bankarray_csrbank1_reload0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_reload0_w;
reg           builder_csr_bankarray_csrbank1_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_en0_r;
reg           builder_csr_bankarray_csrbank1_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_en0_w;
reg           builder_csr_bankarray_csrbank1_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_update_value0_r;
reg           builder_csr_bankarray_csrbank1_update_value0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_update_value0_w;
reg           builder_csr_bankarray_csrbank1_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_value_r;
reg           builder_csr_bankarray_csrbank1_value_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_value_w;
reg           builder_csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_status_r;
reg           builder_csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_status_w;
reg           builder_csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_pending_r;
reg           builder_csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_pending_w;
reg           builder_csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_enable0_r;
reg           builder_csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_enable0_w;
wire          builder_csr_bankarray_csrbank1_sel;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank2_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_txfull_r;
reg           builder_csr_bankarray_csrbank2_txfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_txfull_w;
reg           builder_csr_bankarray_csrbank2_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_rxempty_r;
reg           builder_csr_bankarray_csrbank2_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_rxempty_w;
reg           builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_ev_status_r;
reg           builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_ev_status_w;
reg           builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_ev_pending_r;
reg           builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_ev_pending_w;
reg           builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_ev_enable0_r;
reg           builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_ev_enable0_w;
reg           builder_csr_bankarray_csrbank2_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_txempty_r;
reg           builder_csr_bankarray_csrbank2_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_txempty_w;
reg           builder_csr_bankarray_csrbank2_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_rxfull_r;
reg           builder_csr_bankarray_csrbank2_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_rxfull_w;
wire          builder_csr_bankarray_csrbank2_sel;
wire   [13:0] builder_csr_interconnect_adr;
wire          builder_csr_interconnect_we;
wire   [31:0] builder_csr_interconnect_dat_w;
wire   [31:0] builder_csr_interconnect_dat_r;
reg           builder_simsoc_state = 1'd0;
reg           builder_simsoc_next_state = 1'd0;
reg    [29:0] builder_self0 = 30'd0;
reg    [31:0] builder_self1 = 32'd0;
reg     [3:0] builder_self2 = 4'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg     [2:0] builder_self6 = 3'd0;
reg     [1:0] builder_self7 = 2'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_reset = (main_soc_rst | main_cpu_rst);
assign sim_trace = 1'd1;
assign main_bus_error = builder_error;
always @(*) begin
    main_interrupt <= 32'd0;
    main_interrupt[1] <= main_timer_irq;
    main_interrupt[0] <= main_uart_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = main_int_rst;
assign builder_shared_adr = builder_self0;
assign builder_shared_dat_w = builder_self1;
assign builder_shared_sel = builder_self2;
assign builder_shared_cyc = builder_self3;
assign builder_shared_stb = builder_self4;
assign builder_shared_we = builder_self5;
assign builder_shared_cti = builder_self6;
assign builder_shared_bte = builder_self7;
assign main_ibus_dat_r = builder_shared_dat_r;
assign main_dbus_dat_r = builder_shared_dat_r;
assign main_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_dbus_cyc, main_ibus_cyc};
always @(*) begin
    builder_master <= 3'd0;
    builder_master[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_master[1] <= (builder_shared_adr[29:11] == 16'd32768);
    builder_master[2] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_simsoc_ram_bus_adr = builder_shared_adr;
assign main_simsoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_simsoc_ram_bus_sel = builder_shared_sel;
assign main_simsoc_ram_bus_stb = builder_shared_stb;
assign main_simsoc_ram_bus_we = builder_shared_we;
assign main_simsoc_ram_bus_cti = builder_shared_cti;
assign main_simsoc_ram_bus_bte = builder_shared_bte;
assign main_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_ram_bus_ram_bus_we = builder_shared_we;
assign main_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_ram_bus_ram_bus_bte = builder_shared_bte;
assign builder_simsoc_wishbone_adr = builder_shared_adr;
assign builder_simsoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_simsoc_wishbone_sel = builder_shared_sel;
assign builder_simsoc_wishbone_stb = builder_shared_stb;
assign builder_simsoc_wishbone_we = builder_shared_we;
assign builder_simsoc_wishbone_cti = builder_shared_cti;
assign builder_simsoc_wishbone_bte = builder_shared_bte;
assign main_simsoc_ram_bus_cyc = (builder_shared_cyc & builder_master[0]);
assign main_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_master[1]);
assign builder_simsoc_wishbone_cyc = (builder_shared_cyc & builder_master[2]);
always @(*) begin
    builder_shared_ack <= 1'd0;
    builder_shared_ack <= ((main_simsoc_ram_bus_ack | main_ram_bus_ram_bus_ack) | builder_simsoc_wishbone_ack);
    if (builder_done) begin
        builder_shared_ack <= 1'd1;
    end
end
assign builder_shared_err = ((main_simsoc_ram_bus_err | main_ram_bus_ram_bus_err) | builder_simsoc_wishbone_err);
always @(*) begin
    builder_shared_dat_r <= 32'd0;
    builder_shared_dat_r <= ((({32{builder_slaves[0]}} & main_simsoc_ram_bus_dat_r) | ({32{builder_slaves[1]}} & main_ram_bus_ram_bus_dat_r)) | ({32{builder_slaves[2]}} & builder_simsoc_wishbone_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
    end
end
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    if (builder_done) begin
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_bus_errors_status = main_bus_errors;
always @(*) begin
    main_soc_rst <= 1'd0;
    if (main_reset_re) begin
        main_soc_rst <= main_reset_storage[0];
    end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign main_simsoc_adr = main_simsoc_ram_bus_adr[14:0];
assign main_simsoc_ram_bus_dat_r = main_simsoc_dat_r;
always @(*) begin
    main_ram_we <= 4'd0;
    main_ram_we[0] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[0]);
    main_ram_we[1] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[1]);
    main_ram_we[2] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[2]);
    main_ram_we[3] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[3]);
end
assign main_ram_adr = main_ram_bus_ram_bus_adr[10:0];
assign main_ram_bus_ram_bus_dat_r = main_ram_dat_r;
assign main_ram_dat_w = main_ram_bus_ram_bus_dat_w;
assign serial_source_valid = main_sink_valid;
assign serial_source_data = main_sink_payload_data;
assign main_sink_ready = serial_source_ready;
assign main_source_valid = serial_sink_valid;
assign main_source_payload_data = serial_sink_data;
assign serial_sink_ready = main_source_ready;
assign main_uart_uart_sink_valid = main_source_valid;
assign main_source_ready = main_uart_uart_sink_ready;
assign main_uart_uart_sink_first = main_source_first;
assign main_uart_uart_sink_last = main_source_last;
assign main_uart_uart_sink_payload_data = main_source_payload_data;
assign main_sink_valid = main_uart_uart_source_valid;
assign main_uart_uart_source_ready = main_sink_ready;
assign main_sink_first = main_uart_uart_source_first;
assign main_sink_last = main_uart_uart_source_last;
assign main_sink_payload_data = main_uart_uart_source_payload_data;
assign main_uart_tx_fifo_sink_valid = main_uart_rxtx_re;
assign main_uart_tx_fifo_sink_payload_data = main_uart_rxtx_r;
assign main_uart_uart_source_valid = main_uart_tx_fifo_source_valid;
assign main_uart_tx_fifo_source_ready = main_uart_uart_source_ready;
assign main_uart_uart_source_first = main_uart_tx_fifo_source_first;
assign main_uart_uart_source_last = main_uart_tx_fifo_source_last;
assign main_uart_uart_source_payload_data = main_uart_tx_fifo_source_payload_data;
assign main_uart_txfull_status = (~main_uart_tx_fifo_sink_ready);
assign main_uart_txempty_status = (~main_uart_tx_fifo_source_valid);
assign main_uart_tx_trigger = main_uart_tx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_valid = main_uart_uart_sink_valid;
assign main_uart_uart_sink_ready = main_uart_rx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_first = main_uart_uart_sink_first;
assign main_uart_rx_fifo_sink_last = main_uart_uart_sink_last;
assign main_uart_rx_fifo_sink_payload_data = main_uart_uart_sink_payload_data;
assign main_uart_rxtx_w = main_uart_rx_fifo_source_payload_data;
assign main_uart_rx_fifo_source_ready = (main_uart_rx_clear | (1'd0 & main_uart_rxtx_we));
assign main_uart_rxempty_status = (~main_uart_rx_fifo_source_valid);
assign main_uart_rxfull_status = (~main_uart_rx_fifo_sink_ready);
assign main_uart_rx_trigger = main_uart_rx_fifo_source_valid;
assign main_uart_tx0 = main_uart_tx_status;
assign main_uart_tx1 = main_uart_tx_pending;
always @(*) begin
    main_uart_tx_clear <= 1'd0;
    if ((main_uart_pending_re & main_uart_pending_r[0])) begin
        main_uart_tx_clear <= 1'd1;
    end
end
assign main_uart_rx0 = main_uart_rx_status;
assign main_uart_rx1 = main_uart_rx_pending;
always @(*) begin
    main_uart_rx_clear <= 1'd0;
    if ((main_uart_pending_re & main_uart_pending_r[1])) begin
        main_uart_rx_clear <= 1'd1;
    end
end
assign main_uart_irq = ((main_uart_pending_status[0] & main_uart_enable_storage[0]) | (main_uart_pending_status[1] & main_uart_enable_storage[1]));
assign main_uart_tx_status = main_uart_tx_trigger;
assign main_uart_rx_status = main_uart_rx_trigger;
assign main_uart_tx_fifo_syncfifo_din = {main_uart_tx_fifo_fifo_in_last, main_uart_tx_fifo_fifo_in_first, main_uart_tx_fifo_fifo_in_payload_data};
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign main_uart_tx_fifo_sink_ready = main_uart_tx_fifo_syncfifo_writable;
assign main_uart_tx_fifo_syncfifo_we = main_uart_tx_fifo_sink_valid;
assign main_uart_tx_fifo_fifo_in_first = main_uart_tx_fifo_sink_first;
assign main_uart_tx_fifo_fifo_in_last = main_uart_tx_fifo_sink_last;
assign main_uart_tx_fifo_fifo_in_payload_data = main_uart_tx_fifo_sink_payload_data;
assign main_uart_tx_fifo_source_valid = main_uart_tx_fifo_readable;
assign main_uart_tx_fifo_source_first = main_uart_tx_fifo_fifo_out_first;
assign main_uart_tx_fifo_source_last = main_uart_tx_fifo_fifo_out_last;
assign main_uart_tx_fifo_source_payload_data = main_uart_tx_fifo_fifo_out_payload_data;
assign main_uart_tx_fifo_re = main_uart_tx_fifo_source_ready;
assign main_uart_tx_fifo_syncfifo_re = (main_uart_tx_fifo_syncfifo_readable & ((~main_uart_tx_fifo_readable) | main_uart_tx_fifo_re));
assign main_uart_tx_fifo_level1 = (main_uart_tx_fifo_level0 + main_uart_tx_fifo_readable);
always @(*) begin
    main_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_uart_tx_fifo_replace) begin
        main_uart_tx_fifo_wrport_adr <= (main_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_uart_tx_fifo_wrport_adr <= main_uart_tx_fifo_produce;
    end
end
assign main_uart_tx_fifo_wrport_dat_w = main_uart_tx_fifo_syncfifo_din;
assign main_uart_tx_fifo_wrport_we = (main_uart_tx_fifo_syncfifo_we & (main_uart_tx_fifo_syncfifo_writable | main_uart_tx_fifo_replace));
assign main_uart_tx_fifo_do_read = (main_uart_tx_fifo_syncfifo_readable & main_uart_tx_fifo_syncfifo_re);
assign main_uart_tx_fifo_rdport_adr = main_uart_tx_fifo_consume;
assign main_uart_tx_fifo_syncfifo_dout = main_uart_tx_fifo_rdport_dat_r;
assign main_uart_tx_fifo_rdport_re = main_uart_tx_fifo_do_read;
assign main_uart_tx_fifo_syncfifo_writable = (main_uart_tx_fifo_level0 != 5'd16);
assign main_uart_tx_fifo_syncfifo_readable = (main_uart_tx_fifo_level0 != 1'd0);
assign main_uart_rx_fifo_syncfifo_din = {main_uart_rx_fifo_fifo_in_last, main_uart_rx_fifo_fifo_in_first, main_uart_rx_fifo_fifo_in_payload_data};
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign main_uart_rx_fifo_sink_ready = main_uart_rx_fifo_syncfifo_writable;
assign main_uart_rx_fifo_syncfifo_we = main_uart_rx_fifo_sink_valid;
assign main_uart_rx_fifo_fifo_in_first = main_uart_rx_fifo_sink_first;
assign main_uart_rx_fifo_fifo_in_last = main_uart_rx_fifo_sink_last;
assign main_uart_rx_fifo_fifo_in_payload_data = main_uart_rx_fifo_sink_payload_data;
assign main_uart_rx_fifo_source_valid = main_uart_rx_fifo_readable;
assign main_uart_rx_fifo_source_first = main_uart_rx_fifo_fifo_out_first;
assign main_uart_rx_fifo_source_last = main_uart_rx_fifo_fifo_out_last;
assign main_uart_rx_fifo_source_payload_data = main_uart_rx_fifo_fifo_out_payload_data;
assign main_uart_rx_fifo_re = main_uart_rx_fifo_source_ready;
assign main_uart_rx_fifo_syncfifo_re = (main_uart_rx_fifo_syncfifo_readable & ((~main_uart_rx_fifo_readable) | main_uart_rx_fifo_re));
assign main_uart_rx_fifo_level1 = (main_uart_rx_fifo_level0 + main_uart_rx_fifo_readable);
always @(*) begin
    main_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_uart_rx_fifo_replace) begin
        main_uart_rx_fifo_wrport_adr <= (main_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_uart_rx_fifo_wrport_adr <= main_uart_rx_fifo_produce;
    end
end
assign main_uart_rx_fifo_wrport_dat_w = main_uart_rx_fifo_syncfifo_din;
assign main_uart_rx_fifo_wrport_we = (main_uart_rx_fifo_syncfifo_we & (main_uart_rx_fifo_syncfifo_writable | main_uart_rx_fifo_replace));
assign main_uart_rx_fifo_do_read = (main_uart_rx_fifo_syncfifo_readable & main_uart_rx_fifo_syncfifo_re);
assign main_uart_rx_fifo_rdport_adr = main_uart_rx_fifo_consume;
assign main_uart_rx_fifo_syncfifo_dout = main_uart_rx_fifo_rdport_dat_r;
assign main_uart_rx_fifo_rdport_re = main_uart_rx_fifo_do_read;
assign main_uart_rx_fifo_syncfifo_writable = (main_uart_rx_fifo_level0 != 5'd16);
assign main_uart_rx_fifo_syncfifo_readable = (main_uart_rx_fifo_level0 != 1'd0);
assign main_timer_zero_trigger = (main_timer_value == 1'd0);
assign main_timer_zero0 = main_timer_zero_status;
assign main_timer_zero1 = main_timer_zero_pending;
always @(*) begin
    main_timer_zero_clear <= 1'd0;
    if ((main_timer_pending_re & main_timer_pending_r)) begin
        main_timer_zero_clear <= 1'd1;
    end
end
assign main_timer_irq = (main_timer_pending_status & main_timer_enable_storage);
assign main_timer_zero_status = main_timer_zero_trigger;
always @(*) begin
    builder_simsoc_next_state <= 1'd0;
    builder_simsoc_next_state <= builder_simsoc_state;
    case (builder_simsoc_state)
        1'd1: begin
            builder_simsoc_next_state <= 1'd0;
        end
        default: begin
            if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
                builder_simsoc_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_simsoc_we <= 1'd0;
    case (builder_simsoc_state)
        1'd1: begin
        end
        default: begin
            if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
                builder_simsoc_we <= (builder_simsoc_wishbone_we & (builder_simsoc_wishbone_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    builder_simsoc_dat_w <= 32'd0;
    case (builder_simsoc_state)
        1'd1: begin
        end
        default: begin
            builder_simsoc_dat_w <= builder_simsoc_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    builder_simsoc_wishbone_dat_r <= 32'd0;
    case (builder_simsoc_state)
        1'd1: begin
            builder_simsoc_wishbone_dat_r <= builder_simsoc_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    builder_simsoc_wishbone_ack <= 1'd0;
    case (builder_simsoc_state)
        1'd1: begin
            builder_simsoc_wishbone_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    builder_simsoc_adr <= 14'd0;
    case (builder_simsoc_state)
        1'd1: begin
        end
        default: begin
            if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
                builder_simsoc_adr <= builder_simsoc_wishbone_adr;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_load0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_load0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_load0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_load0_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank1_reload0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_reload0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_reload0_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_reload0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_en0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_en0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_en0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_en0_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank1_update_value0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_update_value0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_update_value0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_update_value0_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank1_value_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_value_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank1_value_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank1_value_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_ev_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank1_ev_status_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_status_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank1_ev_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank1_ev_pending_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank1_ev_pending_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank1_ev_pending_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank1_ev_enable0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank1_ev_enable0_re <= builder_csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank1_ev_enable0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_load0_w = main_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank1_reload0_w = main_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank1_en0_w = main_timer_en_storage;
assign builder_csr_bankarray_csrbank1_update_value0_w = main_timer_update_value_storage;
assign builder_csr_bankarray_csrbank1_value_w = main_timer_value_status[31:0];
assign main_timer_value_we = builder_csr_bankarray_csrbank1_value_we;
assign main_timer_status_status = main_timer_zero0;
assign builder_csr_bankarray_csrbank1_ev_status_w = main_timer_status_status;
assign main_timer_status_we = builder_csr_bankarray_csrbank1_ev_status_we;
assign main_timer_pending_status = main_timer_zero1;
assign builder_csr_bankarray_csrbank1_ev_pending_w = main_timer_pending_status;
assign main_timer_pending_we = builder_csr_bankarray_csrbank1_ev_pending_we;
assign main_timer_zero2 = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank1_ev_enable0_w = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign main_uart_rxtx_r = builder_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    main_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        main_uart_rxtx_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
always @(*) begin
    main_uart_rxtx_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        main_uart_rxtx_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank2_txfull_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_txfull_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_txfull_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_txfull_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_rxempty_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_rxempty_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_rxempty_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_rxempty_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank2_txempty_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank2_txempty_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_txempty_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank2_txempty_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
assign builder_csr_bankarray_csrbank2_rxfull_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rxfull_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank2_rxfull_re <= builder_csr_bankarray_interface2_bank_bus_we;
    end
end
always @(*) begin
    builder_csr_bankarray_csrbank2_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank2_rxfull_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_txfull_w = main_uart_txfull_status;
assign main_uart_txfull_we = builder_csr_bankarray_csrbank2_txfull_we;
assign builder_csr_bankarray_csrbank2_rxempty_w = main_uart_rxempty_status;
assign main_uart_rxempty_we = builder_csr_bankarray_csrbank2_rxempty_we;
always @(*) begin
    main_uart_status_status <= 2'd0;
    main_uart_status_status[0] <= main_uart_tx0;
    main_uart_status_status[1] <= main_uart_rx0;
end
assign builder_csr_bankarray_csrbank2_ev_status_w = main_uart_status_status[1:0];
assign main_uart_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
    main_uart_pending_status <= 2'd0;
    main_uart_pending_status[0] <= main_uart_tx1;
    main_uart_pending_status[1] <= main_uart_rx1;
end
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_uart_pending_status[1:0];
assign main_uart_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_uart_tx2 = main_uart_enable_storage[0];
assign main_uart_rx2 = main_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank2_txempty_w = main_uart_txempty_status;
assign main_uart_txempty_we = builder_csr_bankarray_csrbank2_txempty_we;
assign builder_csr_bankarray_csrbank2_rxfull_w = main_uart_rxfull_status;
assign main_uart_rxfull_we = builder_csr_bankarray_csrbank2_rxfull_we;
assign builder_csr_interconnect_adr = builder_simsoc_adr;
assign builder_csr_interconnect_we = builder_simsoc_we;
assign builder_csr_interconnect_dat_w = builder_simsoc_dat_w;
assign builder_simsoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_self0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_self0 <= main_ibus_adr;
        end
        default: begin
            builder_self0 <= main_dbus_adr;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_self1 <= main_ibus_dat_w;
        end
        default: begin
            builder_self1 <= main_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_self2 <= main_ibus_sel;
        end
        default: begin
            builder_self2 <= main_dbus_sel;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self3 <= main_ibus_cyc;
        end
        default: begin
            builder_self3 <= main_dbus_cyc;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self4 <= main_ibus_stb;
        end
        default: begin
            builder_self4 <= main_dbus_stb;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self5 <= main_ibus_we;
        end
        default: begin
            builder_self5 <= main_dbus_we;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_self6 <= main_ibus_cti;
        end
        default: begin
            builder_self6 <= main_dbus_cti;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_self7 <= main_ibus_bte;
        end
        default: begin
            builder_self7 <= main_dbus_bte;
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    main_int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_slaves <= builder_master;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_bus_errors != 32'd4294967295)) begin
        if (main_bus_error) begin
            main_bus_errors <= (main_bus_errors + 1'd1);
        end
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    main_simsoc_ram_bus_ack <= 1'd0;
    if (((main_simsoc_ram_bus_cyc & main_simsoc_ram_bus_stb) & ((~main_simsoc_ram_bus_ack) | main_simsoc_adr_burst))) begin
        main_simsoc_ram_bus_ack <= 1'd1;
    end
    main_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & ((~main_ram_bus_ram_bus_ack) | main_ram_adr_burst))) begin
        main_ram_bus_ram_bus_ack <= 1'd1;
    end
    if (main_uart_tx_clear) begin
        main_uart_tx_pending <= 1'd0;
    end
    main_uart_tx_trigger_d <= main_uart_tx_trigger;
    if ((main_uart_tx_trigger & (~main_uart_tx_trigger_d))) begin
        main_uart_tx_pending <= 1'd1;
    end
    if (main_uart_rx_clear) begin
        main_uart_rx_pending <= 1'd0;
    end
    main_uart_rx_trigger_d <= main_uart_rx_trigger;
    if ((main_uart_rx_trigger & (~main_uart_rx_trigger_d))) begin
        main_uart_rx_pending <= 1'd1;
    end
    if (main_uart_tx_fifo_syncfifo_re) begin
        main_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_uart_tx_fifo_re) begin
            main_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
        main_uart_tx_fifo_produce <= (main_uart_tx_fifo_produce + 1'd1);
    end
    if (main_uart_tx_fifo_do_read) begin
        main_uart_tx_fifo_consume <= (main_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
        if ((~main_uart_tx_fifo_do_read)) begin
            main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uart_tx_fifo_do_read) begin
            main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_uart_rx_fifo_syncfifo_re) begin
        main_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_uart_rx_fifo_re) begin
            main_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
        main_uart_rx_fifo_produce <= (main_uart_rx_fifo_produce + 1'd1);
    end
    if (main_uart_rx_fifo_do_read) begin
        main_uart_rx_fifo_consume <= (main_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
        if ((~main_uart_rx_fifo_do_read)) begin
            main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uart_rx_fifo_do_read) begin
            main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_timer_en_storage) begin
        if ((main_timer_value == 1'd0)) begin
            main_timer_value <= main_timer_reload_storage;
        end else begin
            main_timer_value <= (main_timer_value - 1'd1);
        end
    end else begin
        main_timer_value <= main_timer_load_storage;
    end
    if (main_timer_update_value_re) begin
        main_timer_value_status <= main_timer_value;
    end
    if (main_timer_zero_clear) begin
        main_timer_zero_pending <= 1'd0;
    end
    main_timer_zero_trigger_d <= main_timer_zero_trigger;
    if ((main_timer_zero_trigger & (~main_timer_zero_trigger_d))) begin
        main_timer_zero_pending <= 1'd1;
    end
    builder_simsoc_state <= builder_simsoc_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_load0_re) begin
        main_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank1_load0_r;
    end
    main_timer_load_re <= builder_csr_bankarray_csrbank1_load0_re;
    if (builder_csr_bankarray_csrbank1_reload0_re) begin
        main_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank1_reload0_r;
    end
    main_timer_reload_re <= builder_csr_bankarray_csrbank1_reload0_re;
    if (builder_csr_bankarray_csrbank1_en0_re) begin
        main_timer_en_storage <= builder_csr_bankarray_csrbank1_en0_r;
    end
    main_timer_en_re <= builder_csr_bankarray_csrbank1_en0_re;
    if (builder_csr_bankarray_csrbank1_update_value0_re) begin
        main_timer_update_value_storage <= builder_csr_bankarray_csrbank1_update_value0_r;
    end
    main_timer_update_value_re <= builder_csr_bankarray_csrbank1_update_value0_re;
    main_timer_value_re <= builder_csr_bankarray_csrbank1_value_re;
    main_timer_status_re <= builder_csr_bankarray_csrbank1_ev_status_re;
    if (builder_csr_bankarray_csrbank1_ev_pending_re) begin
        main_timer_pending_r <= builder_csr_bankarray_csrbank1_ev_pending_r;
    end
    main_timer_pending_re <= builder_csr_bankarray_csrbank1_ev_pending_re;
    if (builder_csr_bankarray_csrbank1_ev_enable0_re) begin
        main_timer_enable_storage <= builder_csr_bankarray_csrbank1_ev_enable0_r;
    end
    main_timer_enable_re <= builder_csr_bankarray_csrbank1_ev_enable0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= main_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rxfull_w;
            end
        endcase
    end
    main_uart_txfull_re <= builder_csr_bankarray_csrbank2_txfull_re;
    main_uart_rxempty_re <= builder_csr_bankarray_csrbank2_rxempty_re;
    main_uart_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
    if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
        main_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank2_ev_pending_r;
    end
    main_uart_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
    if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
        main_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank2_ev_enable0_r;
    end
    main_uart_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
    main_uart_txempty_re <= builder_csr_bankarray_csrbank2_txempty_re;
    main_uart_rxfull_re <= builder_csr_bankarray_csrbank2_rxfull_re;
    if (sys_rst) begin
        main_reset_storage <= 2'd0;
        main_reset_re <= 1'd0;
        main_scratch_storage <= 32'd305419896;
        main_scratch_re <= 1'd0;
        main_bus_errors_re <= 1'd0;
        main_bus_errors <= 32'd0;
        main_simsoc_ram_bus_ack <= 1'd0;
        main_ram_bus_ram_bus_ack <= 1'd0;
        main_uart_txfull_re <= 1'd0;
        main_uart_rxempty_re <= 1'd0;
        main_uart_tx_pending <= 1'd0;
        main_uart_tx_trigger_d <= 1'd0;
        main_uart_rx_pending <= 1'd0;
        main_uart_rx_trigger_d <= 1'd0;
        main_uart_status_re <= 1'd0;
        main_uart_pending_re <= 1'd0;
        main_uart_pending_r <= 2'd0;
        main_uart_enable_storage <= 2'd0;
        main_uart_enable_re <= 1'd0;
        main_uart_txempty_re <= 1'd0;
        main_uart_rxfull_re <= 1'd0;
        main_uart_tx_fifo_readable <= 1'd0;
        main_uart_tx_fifo_level0 <= 5'd0;
        main_uart_tx_fifo_produce <= 4'd0;
        main_uart_tx_fifo_consume <= 4'd0;
        main_uart_rx_fifo_readable <= 1'd0;
        main_uart_rx_fifo_level0 <= 5'd0;
        main_uart_rx_fifo_produce <= 4'd0;
        main_uart_rx_fifo_consume <= 4'd0;
        main_timer_load_storage <= 32'd0;
        main_timer_load_re <= 1'd0;
        main_timer_reload_storage <= 32'd0;
        main_timer_reload_re <= 1'd0;
        main_timer_en_storage <= 1'd0;
        main_timer_en_re <= 1'd0;
        main_timer_update_value_storage <= 1'd0;
        main_timer_update_value_re <= 1'd0;
        main_timer_value_status <= 32'd0;
        main_timer_value_re <= 1'd0;
        main_timer_zero_pending <= 1'd0;
        main_timer_zero_trigger_d <= 1'd0;
        main_timer_status_re <= 1'd0;
        main_timer_pending_re <= 1'd0;
        main_timer_pending_r <= 1'd0;
        main_timer_enable_storage <= 1'd0;
        main_timer_enable_re <= 1'd0;
        main_timer_value <= 32'd0;
        builder_grant <= 1'd0;
        builder_slaves <= 3'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_simsoc_state <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5734-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5733];
initial begin
	$readmemh("sim_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk_1) begin
	rom_dat0 <= rom[main_simsoc_adr];
end
assign main_simsoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sim_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk_1) begin
	if (main_ram_we[0])
		sram[main_ram_adr][7:0] <= main_ram_dat_w[7:0];
	if (main_ram_we[1])
		sram[main_ram_adr][15:8] <= main_ram_dat_w[15:8];
	if (main_ram_we[2])
		sram[main_ram_adr][23:16] <= main_ram_dat_w[23:16];
	if (main_ram_we[3])
		sram[main_ram_adr][31:24] <= main_ram_dat_w[31:24];
	sram_adr0 <= main_ram_adr;
end
assign main_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:36];
initial begin
	$readmemh("sim_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk_1) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_wrport_we)
		storage[main_uart_tx_fifo_wrport_adr] <= main_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uart_tx_fifo_rdport_adr];
end
assign main_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_wrport_we)
		storage_1[main_uart_rx_fifo_wrport_adr] <= main_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uart_rx_fifo_rdport_adr];
end
assign main_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


VexRiscv VexRiscv(
	.clk(sys_clk_1),
	.dBusWishbone_ACK(main_dbus_ack),
	.dBusWishbone_DAT_MISO(main_dbus_dat_r),
	.dBusWishbone_ERR(main_dbus_err),
	.externalInterruptArray(main_interrupt),
	.externalResetVector(main_vexriscv),
	.iBusWishbone_ACK(main_ibus_ack),
	.iBusWishbone_DAT_MISO(main_ibus_dat_r),
	.iBusWishbone_ERR(main_ibus_err),
	.reset((sys_rst | main_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(main_dbus_adr),
	.dBusWishbone_BTE(main_dbus_bte),
	.dBusWishbone_CTI(main_dbus_cti),
	.dBusWishbone_CYC(main_dbus_cyc),
	.dBusWishbone_DAT_MOSI(main_dbus_dat_w),
	.dBusWishbone_SEL(main_dbus_sel),
	.dBusWishbone_STB(main_dbus_stb),
	.dBusWishbone_WE(main_dbus_we),
	.iBusWishbone_ADR(main_ibus_adr),
	.iBusWishbone_BTE(main_ibus_bte),
	.iBusWishbone_CTI(main_ibus_cti),
	.iBusWishbone_CYC(main_ibus_cyc),
	.iBusWishbone_DAT_MOSI(main_ibus_dat_w),
	.iBusWishbone_SEL(main_ibus_sel),
	.iBusWishbone_STB(main_ibus_stb),
	.iBusWishbone_WE(main_ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-12-16 14:59:38.
//------------------------------------------------------------------------------
